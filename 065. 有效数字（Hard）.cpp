// （一）输入参数枚举：
// INVALID,    0.代表不正确(Alphas, '(', '&' and so on)
// SPACE,      1.代表空格
// SIGN,       2.代表符号
// DIGIT,      3.代表数字
// DOT,        4.代表点符号
// EXPONENT,   5.代表科学计算
// NUM_INPUTS  6.数字输入

// （二）有限状态机状态：(共9种状态了，难设计的是6,7,8状态)
// state 0.初始无输入或者只有space的状态
// state 1.输入了数字之后的状态
// state 2.前面无数字，只输入了Dot的状态
// state 3.输入了符号状态
// state 4.前面有数字和有dot的状态
// state 5.'e' or 'E'输入后的状态
// state 6.输入e之后输入Sign的状态
// state 7.输入e后输入数字的状态
// state 8.前面有有效数输入之后，输入space的状态

class Solution {
public:
	bool isNumber(const char *s) {
		enum InputType {
			INVALID,		// 0 Include: Alphas, '(', '&' ans so on
			SPACE,		// 1
			SIGN,		// 2 '+','-'
			DIGIT,		// 3 numbers
			DOT,			// 4 '.'
			EXPONENT,		// 5 'e' 'E'
		};

		int transTable[][6] = {

		//0INVA,1SPA,2SIG,3DI,4DO,5E
			-1,  0,  3,  1,  2, -1,  //0.初始无输入或者只有space的状态
			-1,  8, -1,  1,  4,  5,  //1.输入了数字之后的状态
			-1, -1, -1,  4, -1, -1,  //2.前面无数字，只输入了Dot的状态
			-1, -1, -1,  1,  2, -1,  //3.输入了符号状态
			-1,  8, -1,  4, -1,  5,  //4.前面有数字和有dot的状态
			-1, -1,  6,  7, -1, -1,  //5.'e' or 'E'输入后的状态
			-1, -1, -1,  7, -1, -1,  //6.输入e之后输入Sign的状态
			-1,  8, -1,  7, -1, -1,  //7.输入e后输入数字的状态
			-1,  8, -1, -1, -1, -1,  //8.前面有有效数输入之后，输入space的状态
		};

		int state = 0;
		while (*s)
		{
			InputType input = INVALID;
			if (*s == ' ') input = SPACE;
			else if (*s == '+' || *s == '-') input = SIGN;
			else if (isdigit(*s)) input = DIGIT;
			else if (*s == '.') input = DOT;
			else if (*s == 'e' || *s == 'E') input = EXPONENT;
            
			state = transTable[state][input];
			if (state == -1) return false;
			++s;
		}
		return state == 1 || state == 4 || state == 7 || state == 8;
	}
};

// 起始为0：
// 　　    当输入空格时，状态仍为0，
// 　　    输入为符号时，状态转为3，3的转换和0是一样的，除了不能再接受符号，故在0的状态的基础上，把接受符号置为-1；
// 　　    当输入为数字时，状态转为1, 状态1的转换在于无法再接受符号，可以接受空格，数字，点，指数；状态1为合法的结束状态；
// 　　    当输入为点时，状态转为2，状态2必须再接受数字，接受其他均为非法；
// 　　    当输入为指数时，非法；
// 状态1：
// 　    　接受数字时仍转为状态1，
// 　　    接受点时，转为状态4，可以接受空格，数字，指数，状态4为合法的结束状态，
// 　　    接受指数时，转为状态5，可以接受符号，数字，不能再接受点，因为指数必须为整数，而且必须再接受数字；
// 状态2：
// 　　    接受数字转为状态4；
// 状态3：
// 　　    和0一样，只是不能接受符号；
// 状态4：
// 　　    接受空格，合法接受；
// 　　    接受数字，仍为状态4；
// 　　    接受指数，转为状态5，
// 状态5：
// 　　    接受符号，转为状态6，状态6和状态5一样，只是不能再接受符号，
// 　　    接受数字，转为状态7，状态7只能接受空格或数字；状态7为合法的结束状态；
// 状态6：
// 　　    只能接受数字，转为状态7；
// 状态7：
// 　　    接受空格，转为状态8，状态7为合法的结束状态；
// 　　    接受数字，仍为状态7；
// 状态8：
// 　　    接受空格，转为状态8，状态8为合法的结束状态；
