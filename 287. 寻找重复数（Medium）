// 数组、双指针、二分查找

// 四个条件如下：
// （1）不能更改原数组（假设数组是只读的）。--->即不能给原数组排序，又不能用多余空间，那么哈希表什么的就不用考虑了。
// （2）只能使用额外的 O(1) 的空间。
// （3）时间复杂度小于 O(n^2) 。          --->也就不能用brute force的方法
// （4）数组中只有一个重复的数字，但它可能不止重复出现一次。

// 时间复杂度：O(nlogn)，空间复杂度：O(1)
// 这里的时间复杂度分析：每次遍历需要O(n)，然后要遍历log(n)次，总共需要O(nlogn)
// 考虑用二分搜索法

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int left = 0, right = nums.size();
        while(left < right) {
            int mid = left + (right - left) / 2, cnt = 0;
            for(int num : nums) {
                if(num <= mid) {
                    ++cnt;
                }
                if(cnt <= mid) left = mid + 1;
                else right = mid;
            }
        }
        return right;
    }
};


// 时间复杂度：O(n)，空间复杂度：O(1)
// 快慢指针法（超棒的方法）：Linked List Cycle II
// 利用坐标和数值之间相互转换，而由于重复数字的存在，那么一定会形成环，我们用快慢指针可以找到环并确定环的起始位置

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = 0, fast = 0, t = 0;
        while (true) {
            slow = nums[slow];
            fast = nums[nums[fast]];
            if (slow == fast) break;
        }
        while (true) {
            slow = nums[slow];
            t = nums[t];
            if (slow == t) break;
        }
        return slow;
    }
};
