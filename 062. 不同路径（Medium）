// 数组、动态规划（Dynamic Programming）

// 类似于 070.Climbing Stairs（动态规划Dynamic Programming）
// 可以维护一个二维数组path，其中path[i][j]表示到当前位置不同的走法的个数（对于格点(i,j)。由于只能从上格点(i-1,j)或左格点(i,j-1)到达，并且两者路径是不重复的）可以得到递推式为: path[i][j] = path[i - 1][j] + path[i][j - 1]。

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int> > path(m, vector<int>(n, 1));
        for(int i = 1; i < m; i ++)
        {
            for(int j = 1; j < n; j ++)
            {
                path[i][j] = path[i-1][j] + path[i][j-1];
            }
        }
        return path[m-1][n-1];
    }
};


// 为了节省空间，使用一维数组dp，一行一行的刷新也可以。

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> dp(n, 1);
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                dp[j] += dp[j - 1];  //相当于每次都在刷新i和j（分别计算i、j）与法(1)对照着理解。
            }
        }
        return dp[n - 1];
    }
};


// 相当于总共走了m+n-2步，其中m-1步向右走，n-1步向下走，那么总共不同的方法个数就相当于在步数里面m-1和n-1中较小的那个数的取法，实际上是一道组合数的问题（也就是从m+n-2个不同元素中每次取出m-1个元素的组合数）。

class Solution {
public:
    int uniquePaths(int m, int n) {
        double num = 1, denom = 1;
        int small = m > n ? n : m;
        for (int i = 1; i <= small - 1; ++i) {
            num *= m + n - 1 - i;  //算分子
            denom *= i;  //算分母
        }
        return (int)(num / denom);
    }
};
