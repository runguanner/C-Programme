// 数组、动态规划

// 与上题差别不大，只需要判断有障碍置零即可。对于首行首列，第一个障碍及之后的路径数均为0

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        if(obstacleGrid.empty())
            return 0;
        int m = obstacleGrid.size();
        if(obstacleGrid[0].empty())
            return 0;
        int n = obstacleGrid[0].size();
        vector<vector<int> > path(m, vector<int>(n, 0));
        for(int i = 0; i < m; i ++)  //判断边缘的位置
        {
            if(obstacleGrid[i][0] != 1)
                path[i][0] = 1;
            else
                break;
        }
        for(int i = 0; i < n; i ++)
        {
            if(obstacleGrid[0][i] != 1)
                path[0][i] = 1;
            else
                break;
        }
        for(int i = 1; i < m; i ++)
        {
            for(int j = 1; j < n; j ++)
            {
                if(obstacleGrid[i][j] == 1)
                    path[i][j] = 0;
                else
                    path[i][j] = path[i-1][j] + path[i][j-1];
            }
        }
        return path[m-1][n-1];
    }
};

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if (obstacleGrid.empty() || obstacleGrid[0].empty() || obstacleGrid[0][0] == 1) return 0;
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();  //
        vector<vector<long>> dp(m + 1, vector<long>(n + 1, 0));  //使用一个二维的dp数组，大小为(m+1)x(n+1)是为了handle边缘情况，当i或j为0时，减1可能会出错。
        dp[0][1] = 1;  //需要初始化dp数组的某个值，使得其能正常累加。当起点不是障碍物时，其dp值应该为值，即dp[1][1] = 1，由于其是由 dp[0][1] + dp[1][0] 更新而来，所以二者中任意一个初始化为1即可。
        for (int i = 1; i <= m; ++i) {  //dp[i][j]表示到达(i-1,j-1)位置的不同路径的数量，那么i和j需要更新的范围就是[1,m]和[1,n]
            for (int j = 1; j <= n; ++j) {
                if (obstacleGrid[i - 1][j - 1] != 0) continue;  //当某个位置是障碍物时，其dp值为0，我们直接跳过该位置即可
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];  //因为初始值全部赋为0，跳过的位置之后也还是为0
            }
        }
        return dp[m][n];
    }
};
