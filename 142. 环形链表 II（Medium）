// 链表、双指针


// 思路一：
// 1）遍历链表，将链表中节点对应的指针（地址），插入set；
// 2）在遍历时，插入节点前，需要在set中查找，第一个在set中发现的节点地址，即是链表环的起点.
// class Solution {
// public:
//     ListNode *detectCycle(ListNode *head) {
//         set<ListNode *>node_set;  //设置node_set
//         while(head) {  //遍历链表
//             if(node_set.find(head) != node_set.end()) {  //如果在node_set中已经出现了，即拿一个指针域去node_set里面查找有没有对应的
//                 return head;  //返回此时环的第一个节点
//             }
//             node_set.insert(head);  //将节点插入node_set
//             head = head->next;
//         }
//         return NULL;  //没有遇到环，则返回NULL
//     }
// };


//思路二：快慢指针赛跑
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *fast = head;  //快慢指针，fast走两步，slow走一步
        ListNode *slow = head;
        ListNode *meet = NULL;  //相遇的节点
        while(fast) {
            slow = slow->next;  //fast和slow先各走一步
            fast = fast->next;
            if(!fast) {
                return NULL;
            }
            fast = fast->next;  //fast再走一步
            if(fast == slow) {  //fast和slow相遇，记录相遇节点位置，注意相遇节点不一定是环的第一个节点！！！
                meet = fast;
                break;
            }
        }
        if(meet == NULL) {
            return NULL;  //如果没有相遇，则证明无环
        }
        while(head && meet) {
            if(head == meet) {  //当head与meet相遇，则说明遇到环的起始位置
                return head;
            }
            head = head->next;  //head与meet每次走一步，此刻用到的数学原理为a=c（将经过的指针分为a,b,c三段，满足2*(a+b)=a+b+c+b）（2*路程slow = 路程fast）
            meet = meet->next;  //从head和meet出发，两指针速度一样，相遇时即为环的起点。
        }
        return NULL;
    }
};

